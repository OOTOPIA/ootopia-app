// Mocks generated by Mockito 5.2.0 from annotations
// in ootopia_app/test/create_posts/presentation/stores/create_post_store_test.dart.
// Do not manually edit this file.

import 'dart:async' as _i4;
import 'dart:io' as _i10;

import 'package:either_dart/either.dart' as _i2;
import 'package:mockito/mockito.dart' as _i1;
import 'package:ootopia_app/clean_arch/core/exception/failure.dart' as _i5;
import 'package:ootopia_app/clean_arch/create_post/domain/entity/create_post_entity.dart'
    as _i6;
import 'package:ootopia_app/clean_arch/create_post/domain/entity/users_entity.dart'
    as _i8;
import 'package:ootopia_app/clean_arch/create_post/domain/usecases/create_post_usecase.dart'
    as _i3;
import 'package:ootopia_app/clean_arch/create_post/domain/usecases/search_user_by_name_usecase.dart'
    as _i7;
import 'package:ootopia_app/clean_arch/create_post/domain/usecases/send_medias_usecase.dart'
    as _i9;

// ignore_for_file: type=lint
// ignore_for_file: avoid_redundant_argument_values
// ignore_for_file: avoid_setters_without_getters
// ignore_for_file: comment_references
// ignore_for_file: implementation_imports
// ignore_for_file: invalid_use_of_visible_for_testing_member
// ignore_for_file: prefer_const_constructors
// ignore_for_file: unnecessary_parenthesis
// ignore_for_file: camel_case_types

class _FakeEither_0<L, R> extends _i1.Fake implements _i2.Either<L, R> {}

/// A class which mocks [CreatePostUsecase].
///
/// See the documentation for Mockito's code generation for more information.
class MockCreatePostUsecase extends _i1.Mock implements _i3.CreatePostUsecase {
  MockCreatePostUsecase() {
    _i1.throwOnMissingStub(this);
  }

  @override
  _i4.Future<_i2.Either<_i5.Failure, bool>> call(
          _i6.CreatePostEntity? createPostEntity) =>
      (super.noSuchMethod(Invocation.method(#call, [createPostEntity]),
              returnValue: Future<_i2.Either<_i5.Failure, bool>>.value(
                  _FakeEither_0<_i5.Failure, bool>()))
          as _i4.Future<_i2.Either<_i5.Failure, bool>>);
}

/// A class which mocks [SearchUserByNameUsecase].
///
/// See the documentation for Mockito's code generation for more information.
class MockSearchUserByNameUsecase extends _i1.Mock
    implements _i7.SearchUserByNameUsecase {
  MockSearchUserByNameUsecase() {
    _i1.throwOnMissingStub(this);
  }

  @override
  _i4.Future<_i2.Either<_i5.Failure, List<_i8.UsersEntity>>> call(
          {String? fullName, int? page, String? excludedIds}) =>
      (super.noSuchMethod(
              Invocation.method(#call, [], {
                #fullName: fullName,
                #page: page,
                #excludedIds: excludedIds
              }),
              returnValue:
                  Future<_i2.Either<_i5.Failure, List<_i8.UsersEntity>>>.value(
                      _FakeEither_0<_i5.Failure, List<_i8.UsersEntity>>()))
          as _i4.Future<_i2.Either<_i5.Failure, List<_i8.UsersEntity>>>);
}

/// A class which mocks [SendMediasUsecase].
///
/// See the documentation for Mockito's code generation for more information.
class MockSendMediasUsecase extends _i1.Mock implements _i9.SendMediasUsecase {
  MockSendMediasUsecase() {
    _i1.throwOnMissingStub(this);
  }

  @override
  _i4.Future<_i2.Either<_i5.Failure, String>> call(
          {String? type, _i10.File? file}) =>
      (super.noSuchMethod(
              Invocation.method(#call, [], {#type: type, #file: file}),
              returnValue: Future<_i2.Either<_i5.Failure, String>>.value(
                  _FakeEither_0<_i5.Failure, String>()))
          as _i4.Future<_i2.Either<_i5.Failure, String>>);
}
